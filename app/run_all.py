import sys
import os
from fastapi import FastAPI
from fastapi.responses import FileResponse, HTMLResponse, JSONResponse
import pandas as pd
import threading

# Import your model pipeline

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from model.pred_model import main as run_prediction_pipeline  # üü¢ This will run everything

app = FastAPI()

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ ---
pipeline_finished_processing = False
pipeline_error = None

def run_pipeline_in_background():
    global pipeline_finished_processing, pipeline_error
    try:
        print("Background thread: Starting prediction pipeline...")
        run_prediction_pipeline()
        pipeline_finished_processing = True
        print("Background thread: Prediction pipeline finished successfully.")
    except Exception as e:
        pipeline_error = str(e)
        print(f"Background thread: Error during prediction pipeline: {e}")
# --------------------------------------------------------------------

# Run prediction + chart generation when API starts
@app.on_event("startup")
def startup_event():
    print("FastAPI startup event: Triggering prediction pipeline in background.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=run_pipeline_in_background)
    thread.start()
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –±—ã—Å—Ç—Ä–æ, –ø–æ–∑–≤–æ–ª—è—è FastAPI –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    print("FastAPI startup event: Background pipeline initiated. FastAPI will now start.")


# Load forecasts and metrics
forecast_path = "predicted_aug_forecast.xlsx"
test_results_path = "test_vs_prediction.xlsx"
report_path = "output.html"

@app.get("/")
def root():
    if pipeline_error:
        return {"message": "Solar PV Forecasting API is live, but an error occurred during data processing.", "error_details": pipeline_error}
    if not pipeline_finished_processing:
        return {"message": "Solar PV Forecasting API is live! Data is currently being processed. Please try again in a few moments."}
    return {"message": "Solar PV Forecasting API is live! Data processed."}

@app.get("/metrics")
def get_metrics():
    if pipeline_error:
        return JSONResponse(status_code=500, content={"error": "Data processing failed.", "details": pipeline_error})
    if not pipeline_finished_processing or not os.path.exists(test_results_path):
        return JSONResponse(status_code=202, content={"message": "Metrics are being generated. Please try again later."})
    try:
        df = pd.read_excel(test_results_path)
        mae = round((df["Real Prod(mwh)"] - df["Forecast (mwh)"]).abs().mean(), 3)
        rmse = round(((df["Real Prod(mwh)"] - df["Forecast (mwh)"]) ** 2).mean() ** 0.5, 3)
        return {
            "Mean Absolute Error (MAE)": mae,
            "Root Mean Squared Error (RMSE)": rmse,
            "Data Points": len(df)
        }
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"Could not read or process test results: {str(e)}"})

@app.get("/forecast")
def get_forecast():
    if pipeline_error:
        return JSONResponse(status_code=500, content={"error": "Data processing failed.", "details": pipeline_error})
    if not pipeline_finished_processing or not os.path.exists(forecast_path):
        return JSONResponse(status_code=202, content={"message": "Forecast is being generated. Please try again later."})
    
    try:
        df = pd.read_excel(forecast_path)
        return df.to_dict(orient="records")
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": f"Could not read or process forecast file: {str(e)}"})

@app.get("/report")
def get_report():
    if pipeline_error:
        return HTMLResponse(content=f"<h1>Error during data processing</h1><p>{pipeline_error}</p>", status_code=500)
    if not pipeline_finished_processing or not os.path.exists(report_path):
        return HTMLResponse(content="<h1>Report is being generated</h1><p>Please try again in a few moments.</p>", status_code=202)
        
    try:
        with open(report_path, encoding="utf-8") as f:
            content = f.read()
        return HTMLResponse(content=content, status_code=200)
    except Exception as e:
        return HTMLResponse(content=f"<h1>Could not load report</h1><p>{str(e)}</p>", status_code=500)

@app.get("/charts/{filename}")
def get_chart(filename: str):
    if pipeline_error:
        return JSONResponse(status_code=500, content={"error": "Data processing failed, charts may not be available.", "details": pipeline_error})
    
    file_path = f"charts/{filename}"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pipeline_finished_processing, —Ç.–∫. –ø–∞–ø–∫–∞ charts –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–æ –±—ã—Ç—å –ø—É—Å—Ç–æ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
    if not pipeline_finished_processing or not os.path.exists(file_path):
        return JSONResponse(status_code=202, content={"message": "Chart is being generated or not found. Please try again later."})
        
    try:
        return FileResponse(file_path)
    except Exception as e:
        # –≠—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ–∂–∏–¥–∞–µ—Ç—Å—è, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º
        return JSONResponse(status_code=500, content={"error": f"Could not serve chart: {str(e)}"})

# This part is for local development, Render will use the CMD in Dockerfile
if __name__ == "__main__":
    import uvicorn
    print("Starting Uvicorn for local development...")
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –∑–∞–ø—É—Å—Ç–∏–º –ø–∞–π–ø–ª–∞–π–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–æ —Å—Ç–∞—Ä—Ç–∞ uvicorn,
    # —á—Ç–æ–±—ã –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≥–æ—Ç–æ–≤—ã.
    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ Render (–ø–∞–π–ø–ª–∞–π–Ω –≤ —Ñ–æ–Ω–µ), –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π run_prediction_pipeline() –∑–¥–µ—Å—å
    # –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –±–ª–æ–∫ startup_event –∫–∞–∫ –æ–Ω –±—ã–ª –¥–ª—è Render.
    
    # run_prediction_pipeline() # <<< –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    # –ò–ª–∏, —á—Ç–æ–±—ã –ª–æ–∫–∞–ª—å–Ω–æ –±—ã–ª–æ –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Render, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–∂–µ –≤ –ø–æ—Ç–æ–∫–µ:
    print("Local dev: Triggering prediction pipeline in background.")
    thread = threading.Thread(target=run_pipeline_in_background)
    thread.start()
    
    port = int(os.environ.get("PORT", 8000)) # Default to 8000 if PORT not set
    uvicorn.run(app, host="0.0.0.0", port=port)
